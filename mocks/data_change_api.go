// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/ligato/vpp-agent/clientv1/defaultplugins/data_change_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/ligato/vpp-agent/clientv1/defaultplugins"
	acl "github.com/ligato/vpp-agent/plugins/defaultplugins/aclplugin/model/acl"
	interfaces "github.com/ligato/vpp-agent/plugins/defaultplugins/ifplugin/model/interfaces"
	l2 "github.com/ligato/vpp-agent/plugins/defaultplugins/l2plugin/model/l2"
	l3 "github.com/ligato/vpp-agent/plugins/defaultplugins/l3plugin/model/l3"
	net "net"
	reflect "reflect"
)

// MockDataChangeDSL is a mock of DataChangeDSL interface
type MockDataChangeDSL struct {
	ctrl     *gomock.Controller
	recorder *MockDataChangeDSLMockRecorder
}

// MockDataChangeDSLMockRecorder is the mock recorder for MockDataChangeDSL
type MockDataChangeDSLMockRecorder struct {
	mock *MockDataChangeDSL
}

// NewMockDataChangeDSL creates a new mock instance
func NewMockDataChangeDSL(ctrl *gomock.Controller) *MockDataChangeDSL {
	mock := &MockDataChangeDSL{ctrl: ctrl}
	mock.recorder = &MockDataChangeDSLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataChangeDSL) EXPECT() *MockDataChangeDSLMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockDataChangeDSL) Put() PutDSL {
	ret := m.ctrl.Call(m, "Put")
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDataChangeDSLMockRecorder) Put() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDataChangeDSL)(nil).Put))
}

// Delete mocks base method
func (m *MockDataChangeDSL) Delete() DeleteDSL {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDataChangeDSLMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataChangeDSL)(nil).Delete))
}

// Send mocks base method
func (m *MockDataChangeDSL) Send() Reply {
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(Reply)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDataChangeDSLMockRecorder) Send() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDataChangeDSL)(nil).Send))
}

// MockPutDSL is a mock of PutDSL interface
type MockPutDSL struct {
	ctrl     *gomock.Controller
	recorder *MockPutDSLMockRecorder
}

// MockPutDSLMockRecorder is the mock recorder for MockPutDSL
type MockPutDSLMockRecorder struct {
	mock *MockPutDSL
}

// NewMockPutDSL creates a new mock instance
func NewMockPutDSL(ctrl *gomock.Controller) *MockPutDSL {
	mock := &MockPutDSL{ctrl: ctrl}
	mock.recorder = &MockPutDSLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPutDSL) EXPECT() *MockPutDSLMockRecorder {
	return m.recorder
}

// Interface mocks base method
func (m *MockPutDSL) Interface(val *interfaces.Interfaces_Interface) PutDSL {
	ret := m.ctrl.Call(m, "Interface", val)
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// Interface indicates an expected call of Interface
func (mr *MockPutDSLMockRecorder) Interface(val interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interface", reflect.TypeOf((*MockPutDSL)(nil).Interface), val)
}

// BD mocks base method
func (m *MockPutDSL) BD(val *l2.BridgeDomains_BridgeDomain) PutDSL {
	ret := m.ctrl.Call(m, "BD", val)
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// BD indicates an expected call of BD
func (mr *MockPutDSLMockRecorder) BD(val interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BD", reflect.TypeOf((*MockPutDSL)(nil).BD), val)
}

// BDFIB mocks base method
func (m *MockPutDSL) BDFIB(fib *l2.FibTableEntries_FibTableEntry) PutDSL {
	ret := m.ctrl.Call(m, "BDFIB", fib)
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// BDFIB indicates an expected call of BDFIB
func (mr *MockPutDSLMockRecorder) BDFIB(fib interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BDFIB", reflect.TypeOf((*MockPutDSL)(nil).BDFIB), fib)
}

// XConnect mocks base method
func (m *MockPutDSL) XConnect(val *l2.XConnectPairs_XConnectPair) PutDSL {
	ret := m.ctrl.Call(m, "XConnect", val)
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// XConnect indicates an expected call of XConnect
func (mr *MockPutDSLMockRecorder) XConnect(val interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XConnect", reflect.TypeOf((*MockPutDSL)(nil).XConnect), val)
}

// StaticRoute mocks base method
func (m *MockPutDSL) StaticRoute(val *l3.StaticRoutes_Route) PutDSL {
	ret := m.ctrl.Call(m, "StaticRoute", val)
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// StaticRoute indicates an expected call of StaticRoute
func (mr *MockPutDSLMockRecorder) StaticRoute(val interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticRoute", reflect.TypeOf((*MockPutDSL)(nil).StaticRoute), val)
}

// ACL mocks base method
func (m *MockPutDSL) ACL(acl *acl.AccessLists_Acl) PutDSL {
	ret := m.ctrl.Call(m, "ACL", acl)
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// ACL indicates an expected call of ACL
func (mr *MockPutDSLMockRecorder) ACL(acl interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACL", reflect.TypeOf((*MockPutDSL)(nil).ACL), acl)
}

// Delete mocks base method
func (m *MockPutDSL) Delete() DeleteDSL {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPutDSLMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPutDSL)(nil).Delete))
}

// Send mocks base method
func (m *MockPutDSL) Send() Reply {
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(Reply)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockPutDSLMockRecorder) Send() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPutDSL)(nil).Send))
}

// MockDeleteDSL is a mock of DeleteDSL interface
type MockDeleteDSL struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteDSLMockRecorder
}

// MockDeleteDSLMockRecorder is the mock recorder for MockDeleteDSL
type MockDeleteDSLMockRecorder struct {
	mock *MockDeleteDSL
}

// NewMockDeleteDSL creates a new mock instance
func NewMockDeleteDSL(ctrl *gomock.Controller) *MockDeleteDSL {
	mock := &MockDeleteDSL{ctrl: ctrl}
	mock.recorder = &MockDeleteDSLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteDSL) EXPECT() *MockDeleteDSLMockRecorder {
	return m.recorder
}

// Interface mocks base method
func (m *MockDeleteDSL) Interface(ifaceName string) DeleteDSL {
	ret := m.ctrl.Call(m, "Interface", ifaceName)
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// Interface indicates an expected call of Interface
func (mr *MockDeleteDSLMockRecorder) Interface(ifaceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interface", reflect.TypeOf((*MockDeleteDSL)(nil).Interface), ifaceName)
}

// BD mocks base method
func (m *MockDeleteDSL) BD(bdName string) DeleteDSL {
	ret := m.ctrl.Call(m, "BD", bdName)
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// BD indicates an expected call of BD
func (mr *MockDeleteDSLMockRecorder) BD(bdName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BD", reflect.TypeOf((*MockDeleteDSL)(nil).BD), bdName)
}

// BDFIB mocks base method
func (m *MockDeleteDSL) BDFIB(bdName, mac string) DeleteDSL {
	ret := m.ctrl.Call(m, "BDFIB", bdName, mac)
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// BDFIB indicates an expected call of BDFIB
func (mr *MockDeleteDSLMockRecorder) BDFIB(bdName, mac interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BDFIB", reflect.TypeOf((*MockDeleteDSL)(nil).BDFIB), bdName, mac)
}

// XConnect mocks base method
func (m *MockDeleteDSL) XConnect(rxIfaceName string) DeleteDSL {
	ret := m.ctrl.Call(m, "XConnect", rxIfaceName)
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// XConnect indicates an expected call of XConnect
func (mr *MockDeleteDSLMockRecorder) XConnect(rxIfaceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XConnect", reflect.TypeOf((*MockDeleteDSL)(nil).XConnect), rxIfaceName)
}

// StaticRoute mocks base method
func (m *MockDeleteDSL) StaticRoute(vrf uint32, dstAddr *net.IPNet, nextHopAddr net.IP) DeleteDSL {
	ret := m.ctrl.Call(m, "StaticRoute", vrf, dstAddr, nextHopAddr)
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// StaticRoute indicates an expected call of StaticRoute
func (mr *MockDeleteDSLMockRecorder) StaticRoute(vrf, dstAddr, nextHopAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticRoute", reflect.TypeOf((*MockDeleteDSL)(nil).StaticRoute), vrf, dstAddr, nextHopAddr)
}

// ACL mocks base method
func (m *MockDeleteDSL) ACL(aclName string) DeleteDSL {
	ret := m.ctrl.Call(m, "ACL", aclName)
	ret0, _ := ret[0].(DeleteDSL)
	return ret0
}

// ACL indicates an expected call of ACL
func (mr *MockDeleteDSLMockRecorder) ACL(aclName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACL", reflect.TypeOf((*MockDeleteDSL)(nil).ACL), aclName)
}

// Put mocks base method
func (m *MockDeleteDSL) Put() PutDSL {
	ret := m.ctrl.Call(m, "Put")
	ret0, _ := ret[0].(PutDSL)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDeleteDSLMockRecorder) Put() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeleteDSL)(nil).Put))
}

// Send mocks base method
func (m *MockDeleteDSL) Send() Reply {
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(Reply)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDeleteDSLMockRecorder) Send() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDeleteDSL)(nil).Send))
}

// MockReply is a mock of Reply interface
type MockReply struct {
	ctrl     *gomock.Controller
	recorder *MockReplyMockRecorder
}

// MockReplyMockRecorder is the mock recorder for MockReply
type MockReplyMockRecorder struct {
	mock *MockReply
}

// NewMockReply creates a new mock instance
func NewMockReply(ctrl *gomock.Controller) *MockReply {
	mock := &MockReply{ctrl: ctrl}
	mock.recorder = &MockReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReply) EXPECT() *MockReplyMockRecorder {
	return m.recorder
}

// ReceiveReply mocks base method
func (m *MockReply) ReceiveReply() error {
	ret := m.ctrl.Call(m, "ReceiveReply")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveReply indicates an expected call of ReceiveReply
func (mr *MockReplyMockRecorder) ReceiveReply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveReply", reflect.TypeOf((*MockReply)(nil).ReceiveReply))
}
